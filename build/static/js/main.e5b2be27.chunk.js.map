{"version":3,"sources":["App.jsx","index.js"],"names":["sdk","ThirdwebSDK","bundleDropModule","getBundleDropModule","tokenModule","getTokenModule","voteModule","getVoteModule","App","useWeb3","connectWallet","address","error","provider","console","log","signer","getSigner","undefined","useState","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","isVoting","setIsVoting","hasVoted","setHasVoted","useEffect","getAllClaimerAddresses","then","addresses","catch","err","getAllHolderBalances","amounts","memberList","useMemo","map","tokenAmount","ethers","utils","formatUnits","setProviderOrSigner","balanceOf","balance","gt","UnsupportedChainIdError","className","onClick","member","str","substring","length","onSubmit","e","a","preventDefault","stopPropagation","votes","proposal","voteResult","proposalId","vote","forEach","document","getElementById","type","checked","getDelegationOf","constants","AddressZero","delegateTo","Promise","all","get","state","execute","index","description","id","name","value","defaultChecked","htmlFor","label","disabled","claim","toLowerCase","finally","window","ethereum","ReactDOM","render","StrictMode","connectors","injected","supportedChainIds"],"mappings":"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","file":"static/js/main.e5b2be27.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\n\nimport { UnsupportedChainIdError } from \"@web3-react/core\";\n\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\n\nconst bundleDropModule = sdk.getBundleDropModule(\n  \"0xA147969A02B7Ab46364E8399aeb3396Ad0a6134a\",\n);\n\nconst tokenModule = sdk.getTokenModule(\n  \"0x3418AA364aAddbFF91Ed0d74D415C4c4D2Fe6324\"\n);\n\nconst voteModule = sdk.getVoteModule(\n  \"0x449bABD357d84a7Fe3FFe3D6182f9439BdeCbd6A\",\n);\nconst App = () => {\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"üëã Address:\", address)\n\n  // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n  const signer = provider ? provider.getSigner() : undefined;\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n  // isClaiming lets us easily keep a loading state while the NFT is minting.\n  const [isClaiming, setIsClaiming] = useState(false);\n  // Holds the amount of token each member has in state.\nconst [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n// The array holding all of our members addresses.\nconst [memberAddresses, setMemberAddresses] = useState([]);\nconst [proposals, setProposals] = useState([]);\nconst [isVoting, setIsVoting] = useState(false);\nconst [hasVoted, setHasVoted] = useState(false);\n\n// A fancy function to shorten someones wallet address, no need to show the whole thing. \nconst shortenAddress = (str) => {\n  return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n};\n\n// This useEffect grabs all the addresses of our members holding our NFT.\nuseEffect(() => {\n  if (!hasClaimedNFT) {\n    return;\n  }\n  \n  // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n  // with tokenId 0.\n  bundleDropModule\n    .getAllClaimerAddresses(\"0\")\n    .then((addresses) => {\n      console.log(\"üöÄ Members addresses\", addresses)\n      setMemberAddresses(addresses);\n    })\n    .catch((err) => {\n      console.error(\"failed to get member list\", err);\n    });\n}, [hasClaimedNFT]);\n\n// This useEffect grabs the # of token each member holds.\nuseEffect(() => {\n  if (!hasClaimedNFT) {\n    return;\n  }\n\n  // Grab all the balances.\n  tokenModule\n    .getAllHolderBalances()\n    .then((amounts) => {\n      console.log(\"üëú Amounts\", amounts)\n      setMemberTokenAmounts(amounts);\n    })\n    .catch((err) => {\n      console.error(\"failed to get token amounts\", err);\n    });\n}, [hasClaimedNFT]);\n\n// Now, we combine the memberAddresses and memberTokenAmounts into a single array\nconst memberList = useMemo(() => {\n  return memberAddresses.map((address) => {\n    return {\n      address,\n      tokenAmount: ethers.utils.formatUnits(\n        // If the address isn't in memberTokenAmounts, it means they don't\n        // hold any of our token.\n        memberTokenAmounts[address] || 0,\n        18,\n      ),\n    };\n  });\n}, [memberAddresses, memberTokenAmounts]);\n  // Another useEffect!\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  useEffect(() => {\n    if (!address) {\n      return;\n    }\n    return bundleDropModule\n      .balanceOf(address, \"0\")\n      .then((balance) => {\n        if (balance.gt(0)) {\n          setHasClaimedNFT(true);\n          console.log(\"üåü this user has a membership NFT!\")\n        } else {\n          setHasClaimedNFT(false);\n          console.log(\"üò≠ this user doesn't have a membership NFT.\")\n        }\n      })\n      .catch((error) => {\n        setHasClaimedNFT(false);\n        console.error(\"failed to nft balance\", error);\n      });\n  }, [address]);\n  if (error instanceof UnsupportedChainIdError ) {\n    return (\n      <div className=\"unsupported-network\">\n        <h2>Please connect to Rinkeby</h2>\n        <p>\n          This dapp only works on the Rinkeby network, please switch networks\n          in your connected wallet.\n        </p>\n      </div>\n    );\n  }\n//case 1 when metamask not connected\n  if (!address) {\n    return (\n      <div className=\"landing\">\n        <h1>Welcome to Chai Ki Tapri DAO</h1>\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n          Connect your wallet\n        </button>\n      </div>\n    );\n  }\n  //if connected wallet, minted nft for joining dao, show membership page. Case 3, show list of all holders\n  if (hasClaimedNFT) {\n    return (\n      <div className=\"member-page\">\n        <h1>üç™Chai Ki Tapri Members Page</h1>\n        <p>Congratulations on being a member</p>\n        <div>\n          <div>\n            <h2>Member List</h2>\n            <table className=\"card\">\n              <thead>\n                <tr>\n                  <th>Address</th>\n                  <th>Token Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {memberList.map((member) => {\n                  return (\n                    <tr key={member.address}>\n                      <td>{shortenAddress(member.address)}</td>\n                      <td>{member.tokenAmount}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          <div>\n            <h2>Active Proposals</h2>\n            <form\n              onSubmit={async (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                //before we do async things, we want to disable the button to prevent double clicks\n                setIsVoting(true);\n\n                // lets get the votes from the form for the values\n                const votes = proposals.map((proposal) => {\n                  let voteResult = {\n                    proposalId: proposal.proposalId,\n                    //abstain by default\n                    vote: 2,\n                  };\n                  proposal.votes.forEach((vote) => {\n                    const elem = document.getElementById(\n                      proposal.proposalId + \"-\" + vote.type\n                    );\n\n                    if (elem.checked) {\n                      voteResult.vote = vote.type;\n                      return;\n                    }\n                  });\n                  return voteResult;\n                });\n\n                // first we need to make sure the user delegates their token to vote\n                try {\n                  //we'll check if the wallet still needs to delegate their tokens before they can vote\n                  const delegation = await tokenModule.getDelegationOf(address);\n                  // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\n                  if (delegation === ethers.constants.AddressZero) {\n                    //if they haven't delegated their tokens yet, we'll have them delegate them before voting\n                    await tokenModule.delegateTo(address);\n                  }\n                  // then we need to vote on the proposals\n                  try {\n                    await Promise.all(\n                      votes.map(async (vote) => {\n                        // before voting we first need to check whether the proposal is open for voting\n                        // we first need to get the latest state of the proposal\n                        const proposal = await voteModule.get(vote.proposalId);\n                        // then we check if the proposal is open for voting (state === 1 means it is open)\n                        if (proposal.state === 1) {\n                          // if it is open for voting, we'll vote on it\n                          return voteModule.vote(vote.proposalId, vote.vote);\n                        }\n                        // if the proposal is not open for voting we just return nothing, letting us continue\n                        return;\n                      })\n                    );\n                    try {\n                      // if any of the propsals are ready to be executed we'll need to execute them\n                      // a proposal is ready to be executed if it is in state 4\n                      await Promise.all(\n                        votes.map(async (vote) => {\n                          // we'll first get the latest state of the proposal again, since we may have just voted before\n                          const proposal = await voteModule.get(\n                            vote.proposalId\n                          );\n\n                          //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\n                          if (proposal.state === 4) {\n                            return voteModule.execute(vote.proposalId);\n                          }\n                        })\n                      );\n                      // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\n                      setHasVoted(true);\n                      // and log out a success message\n                      console.log(\"successfully voted\");\n                    } catch (err) {\n                      console.error(\"failed to execute votes\", err);\n                    }\n                  } catch (err) {\n                    console.error(\"failed to vote\", err);\n                  }\n                } catch (err) {\n                  console.error(\"failed to delegate tokens\");\n                } finally {\n                  // in *either* case we need to set the isVoting state to false to enable the button again\n                  setIsVoting(false);\n                }\n              }}\n            >\n              {proposals.map((proposal, index) => (\n                <div key={proposal.proposalId} className=\"card\">\n                  <h5>{proposal.description}</h5>\n                  <div>\n                    {proposal.votes.map((vote) => (\n                      <div key={vote.type}>\n                        <input\n                          type=\"radio\"\n                          id={proposal.proposalId + \"-\" + vote.type}\n                          name={proposal.proposalId}\n                          value={vote.type}\n                          //default the \"abstain\" vote to chedked\n                          defaultChecked={vote.type === 2}\n                        />\n                        <label htmlFor={proposal.proposalId + \"-\" + vote.type}>\n                          {vote.label}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n              <button disabled={isVoting || hasVoted} type=\"submit\">\n                {isVoting\n                  ? \"Voting...\"\n                  : hasVoted\n                    ? \"You Already Voted\"\n                    : \"Submit Votes\"}\n              </button>\n              <small>\n                This will trigger multiple transactions that you will need to\n                sign.\n              </small>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  };\n//if not claimed then claim using mintNft\n  const mintNft = () => {\n    setIsClaiming(true);\n    // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n    bundleDropModule\n    .claim(\"0\", 1)\n    .then(() => {\n      // Set claim state.\n      setHasClaimedNFT(true);\n      // Show user their fancy new NFT!\n      console.log(\n        `üåä Successfully Minted! Check it our on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address.toLowerCase()}/0`\n      );\n    })\n    .catch((err) => {\n      console.error(\"failed to claim\", err);\n    })\n    .finally(() => {\n      // Stop loading state.\n      setIsClaiming(false);\n    });\n  }\n\n  // Render mint nft screen.\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free üç™DAO Membership NFT</h1>\n      <button\n        disabled={isClaiming}\n        onClick={() => mintNft()}\n      >\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\n//Import ThirdWeb\nimport { ThirdwebWeb3Provider } from '@3rdweb/hooks';\n\n\n// Include what chains you wanna support.\n// 4 = Rinkeby.\nconst supportedChainIds = [4];\n\n// Include what type of wallet you want to support.\n// In this case, we support Metamask which is an \"injected wallet\".\nconst connectors = {\n  injected: {},\n};\n\nif (typeof window.ethereum == 'undefined') {\n  console.log('MetaMask is uninstalled!');\n}\n// Render the App component to the DOM\nReactDOM.render(\n  <React.StrictMode>\n    <ThirdwebWeb3Provider\n    connectors={connectors}\n    supportedChainIds={supportedChainIds}\n    >\n    <App />\n    </ThirdwebWeb3Provider>\n    \n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}