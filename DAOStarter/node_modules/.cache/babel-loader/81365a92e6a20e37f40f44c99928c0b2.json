{"ast":null,"code":"var _jsxFileName = \"/home/ellika/Web3/DAOStarter/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { UnsupportedChainIdError } from \"@web3-react/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst bundleDropModule = sdk.getBundleDropModule(\"0xA147969A02B7Ab46364E8399aeb3396Ad0a6134a\");\nconst tokenModule = sdk.getTokenModule(\"0x3418AA364aAddbFF91Ed0d74D415C4c4D2Fe6324\");\nconst voteModule = sdk.getVoteModule(\"0x449bABD357d84a7Fe3FFe3D6182f9439BdeCbd6A\");\n\nconst App = () => {\n  _s();\n\n  const {\n    connectWallet,\n    address,\n    error,\n    provider\n  } = useWeb3();\n  console.log(\"👋 Address:\", address); // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n\n  const signer = provider ? provider.getSigner() : undefined;\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false); // isClaiming lets us easily keep a loading state while the NFT is minting.\n\n  const [isClaiming, setIsClaiming] = useState(false); // Holds the amount of token each member has in state.\n\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({}); // The array holding all of our members addresses.\n\n  const [memberAddresses, setMemberAddresses] = useState([]);\n  const [proposals, setProposals] = useState([]);\n  const [isVoting, setIsVoting] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false); // A fancy function to shorten someones wallet address, no need to show the whole thing. \n\n  const shortenAddress = str => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  }; // This useEffect grabs all the addresses of our members holding our NFT.\n\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n    // with tokenId 0.\n\n\n    bundleDropModule.getAllClaimerAddresses(\"0\").then(addresses => {\n      console.log(\"🚀 Members addresses\", addresses);\n      setMemberAddresses(addresses);\n    }).catch(err => {\n      console.error(\"failed to get member list\", err);\n    });\n  }, [hasClaimedNFT]); // This useEffect grabs the # of token each member holds.\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // Grab all the balances.\n\n\n    tokenModule.getAllHolderBalances().then(amounts => {\n      console.log(\"👜 Amounts\", amounts);\n      setMemberTokenAmounts(amounts);\n    }).catch(err => {\n      console.error(\"failed to get token amounts\", err);\n    });\n  }, [hasClaimedNFT]); // Now, we combine the memberAddresses and memberTokenAmounts into a single array\n\n  const memberList = useMemo(() => {\n    return memberAddresses.map(address => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits( // If the address isn't in memberTokenAmounts, it means they don't\n        // hold any of our token.\n        memberTokenAmounts[address] || 0, 18)\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]); // Another useEffect!\n\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n  useEffect(() => {\n    if (!address) {\n      return;\n    }\n\n    return bundleDropModule.balanceOf(address, \"0\").then(balance => {\n      if (balance.gt(0)) {\n        setHasClaimedNFT(true);\n        console.log(\"🌟 this user has a membership NFT!\");\n      } else {\n        setHasClaimedNFT(false);\n        console.log(\"😭 this user doesn't have a membership NFT.\");\n      }\n    }).catch(error => {\n      setHasClaimedNFT(false);\n      console.error(\"failed to nft balance\", error);\n    });\n  }, [address]);\n\n  if (error instanceof UnsupportedChainIdError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unsupported-network\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Please connect to Rinkeby\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This dapp only works on the Rinkeby network, please switch networks in your connected wallet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this);\n  } //case 1 when metamask not connected\n\n\n  if (!address) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"landing\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to NarutoDAO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => connectWallet(\"injected\"),\n        className: \"btn-hero\",\n        children: \"Connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this);\n  } //if connected wallet, minted nft for joining dao, show membership page. Case 3, show list of all holders\n\n\n  if (hasClaimedNFT) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"member-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDF6ADAO Member Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Congratulations on being a member\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Member List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"card\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Token Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: memberList.map(member => {\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: shortenAddress(member.address)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 166,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: member.tokenAmount\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 167,\n                    columnNumber: 23\n                  }, this)]\n                }, member.address, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Active Proposals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: async e => {\n              e.preventDefault();\n              e.stopPropagation(); //before we do async things, we want to disable the button to prevent double clicks\n\n              setIsVoting(true); // lets get the votes from the form for the values\n\n              const votes = proposals.map(proposal => {\n                let voteResult = {\n                  proposalId: proposal.proposalId,\n                  //abstain by default\n                  vote: 2\n                };\n                proposal.votes.forEach(vote => {\n                  const elem = document.getElementById(proposal.proposalId + \"-\" + vote.type);\n\n                  if (elem.checked) {\n                    voteResult.vote = vote.type;\n                    return;\n                  }\n                });\n                return voteResult;\n              }); // first we need to make sure the user delegates their token to vote\n\n              try {\n                //we'll check if the wallet still needs to delegate their tokens before they can vote\n                const delegation = await tokenModule.getDelegationOf(address); // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\n\n                if (delegation === ethers.constants.AddressZero) {\n                  //if they haven't delegated their tokens yet, we'll have them delegate them before voting\n                  await tokenModule.delegateTo(address);\n                } // then we need to vote on the proposals\n\n\n                try {\n                  await Promise.all(votes.map(async vote => {\n                    // before voting we first need to check whether the proposal is open for voting\n                    // we first need to get the latest state of the proposal\n                    const proposal = await voteModule.get(vote.proposalId); // then we check if the proposal is open for voting (state === 1 means it is open)\n\n                    if (proposal.state === 1) {\n                      // if it is open for voting, we'll vote on it\n                      return voteModule.vote(vote.proposalId, vote.vote);\n                    } // if the proposal is not open for voting we just return nothing, letting us continue\n\n\n                    return;\n                  }));\n\n                  try {\n                    // if any of the propsals are ready to be executed we'll need to execute them\n                    // a proposal is ready to be executed if it is in state 4\n                    await Promise.all(votes.map(async vote => {\n                      // we'll first get the latest state of the proposal again, since we may have just voted before\n                      const proposal = await voteModule.get(vote.proposalId); //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\n\n                      if (proposal.state === 4) {\n                        return voteModule.execute(vote.proposalId);\n                      }\n                    })); // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\n\n                    setHasVoted(true); // and log out a success message\n\n                    console.log(\"successfully voted\");\n                  } catch (err) {\n                    console.error(\"failed to execute votes\", err);\n                  }\n                } catch (err) {\n                  console.error(\"failed to vote\", err);\n                }\n              } catch (err) {\n                console.error(\"failed to delegate tokens\");\n              } finally {\n                // in *either* case we need to set the isVoting state to false to enable the button again\n                setIsVoting(false);\n              }\n            },\n            children: [proposals.map((proposal, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: proposal.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: proposal.votes.map(vote => /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"radio\",\n                    id: proposal.proposalId + \"-\" + vote.type,\n                    name: proposal.proposalId,\n                    value: vote.type //default the \"abstain\" vote to chedked\n                    ,\n                    defaultChecked: vote.type === 2\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 269,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: proposal.proposalId + \"-\" + vote.type,\n                    children: vote.label\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 277,\n                    columnNumber: 25\n                  }, this)]\n                }, vote.type, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 19\n              }, this)]\n            }, proposal.proposalId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n              disabled: isVoting || hasVoted,\n              type: \"submit\",\n              children: isVoting ? \"Voting...\" : hasVoted ? \"You Already Voted\" : \"Submit Votes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: \"This will trigger multiple transactions that you will need to sign.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this);\n  }\n\n  ; //if not claimed then claim using mintNft\n\n  const mintNft = () => {\n    setIsClaiming(true); // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n\n    bundleDropModule.claim(\"0\", 1).then(() => {\n      // Set claim state.\n      setHasClaimedNFT(true); // Show user their fancy new NFT!\n\n      console.log(`🌊 Successfully Minted! Check it our on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address.toLowerCase()}/0`);\n    }).catch(err => {\n      console.error(\"failed to claim\", err);\n    }).finally(() => {\n      // Stop loading state.\n      setIsClaiming(false);\n    });\n  }; // Render mint nft screen.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mint your free \\uD83C\\uDF6ADAO Membership NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isClaiming,\n      onClick: () => mintNft(),\n      children: isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"kfqd3Z/XMG8XhkeCVy9obHCgIi8=\", false, function () {\n  return [useWeb3];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ellika/Web3/DAOStarter/src/App.jsx"],"names":["useEffect","useMemo","useState","ethers","useWeb3","ThirdwebSDK","UnsupportedChainIdError","sdk","bundleDropModule","getBundleDropModule","tokenModule","getTokenModule","voteModule","getVoteModule","App","connectWallet","address","error","provider","console","log","signer","getSigner","undefined","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","shortenAddress","str","substring","length","getAllClaimerAddresses","then","addresses","catch","err","getAllHolderBalances","amounts","memberList","map","tokenAmount","utils","formatUnits","setProviderOrSigner","balanceOf","balance","gt","member","e","preventDefault","stopPropagation","votes","proposal","voteResult","proposalId","vote","forEach","elem","document","getElementById","type","checked","delegation","getDelegationOf","constants","AddressZero","delegateTo","Promise","all","get","state","execute","index","description","label","mintNft","claim","toLowerCase","finally"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,uBAAT,QAAwC,kBAAxC;;AAGA,MAAMC,GAAG,GAAG,IAAIF,WAAJ,CAAgB,SAAhB,CAAZ;AAEA,MAAMG,gBAAgB,GAAGD,GAAG,CAACE,mBAAJ,CACvB,4CADuB,CAAzB;AAIA,MAAMC,WAAW,GAAGH,GAAG,CAACI,cAAJ,CAClB,4CADkB,CAApB;AAIA,MAAMC,UAAU,GAAGL,GAAG,CAACM,aAAJ,CACjB,4CADiB,CAAnB;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA;AAAjC,MAA8Cd,OAAO,EAA3D;AACAe,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,OAA3B,EAFgB,CAIhB;AACA;;AACA,QAAMK,MAAM,GAAGH,QAAQ,GAAGA,QAAQ,CAACI,SAAT,EAAH,GAA0BC,SAAjD;AAEA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCvB,QAAQ,CAAC,KAAD,CAAlD,CARgB,CAShB;;AACA,QAAM,CAACwB,UAAD,EAAaC,aAAb,IAA8BzB,QAAQ,CAAC,KAAD,CAA5C,CAVgB,CAWhB;;AACF,QAAM,CAAC0B,kBAAD,EAAqBC,qBAArB,IAA8C3B,QAAQ,CAAC,EAAD,CAA5D,CAZkB,CAalB;;AACA,QAAM,CAAC4B,eAAD,EAAkBC,kBAAlB,IAAwC7B,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAAC8B,SAAD,EAAYC,YAAZ,IAA4B/B,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACgC,QAAD,EAAWC,WAAX,IAA0BjC,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACkC,QAAD,EAAWC,WAAX,IAA0BnC,QAAQ,CAAC,KAAD,CAAxC,CAjBkB,CAmBlB;;AACA,QAAMoC,cAAc,GAAIC,GAAD,IAAS;AAC9B,WAAOA,GAAG,CAACC,SAAJ,CAAc,CAAd,EAAiB,CAAjB,IAAsB,KAAtB,GAA8BD,GAAG,CAACC,SAAJ,CAAcD,GAAG,CAACE,MAAJ,GAAa,CAA3B,CAArC;AACD,GAFD,CApBkB,CAwBlB;;;AACAzC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACwB,aAAL,EAAoB;AAClB;AACD,KAHa,CAKd;AACA;;;AACAhB,IAAAA,gBAAgB,CACbkC,sBADH,CAC0B,GAD1B,EAEGC,IAFH,CAESC,SAAD,IAAe;AACnBzB,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCwB,SAApC;AACAb,MAAAA,kBAAkB,CAACa,SAAD,CAAlB;AACD,KALH,EAMGC,KANH,CAMUC,GAAD,IAAS;AACd3B,MAAAA,OAAO,CAACF,KAAR,CAAc,2BAAd,EAA2C6B,GAA3C;AACD,KARH;AASD,GAhBQ,EAgBN,CAACtB,aAAD,CAhBM,CAAT,CAzBkB,CA2ClB;;AACAxB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACwB,aAAL,EAAoB;AAClB;AACD,KAHa,CAKd;;;AACAd,IAAAA,WAAW,CACRqC,oBADH,GAEGJ,IAFH,CAESK,OAAD,IAAa;AACjB7B,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B4B,OAA1B;AACAnB,MAAAA,qBAAqB,CAACmB,OAAD,CAArB;AACD,KALH,EAMGH,KANH,CAMUC,GAAD,IAAS;AACd3B,MAAAA,OAAO,CAACF,KAAR,CAAc,6BAAd,EAA6C6B,GAA7C;AACD,KARH;AASD,GAfQ,EAeN,CAACtB,aAAD,CAfM,CAAT,CA5CkB,CA6DlB;;AACA,QAAMyB,UAAU,GAAGhD,OAAO,CAAC,MAAM;AAC/B,WAAO6B,eAAe,CAACoB,GAAhB,CAAqBlC,OAAD,IAAa;AACtC,aAAO;AACLA,QAAAA,OADK;AAELmC,QAAAA,WAAW,EAAEhD,MAAM,CAACiD,KAAP,CAAaC,WAAb,EACX;AACA;AACAzB,QAAAA,kBAAkB,CAACZ,OAAD,CAAlB,IAA+B,CAHpB,EAIX,EAJW;AAFR,OAAP;AASD,KAVM,CAAP;AAWD,GAZyB,EAYvB,CAACc,eAAD,EAAkBF,kBAAlB,CAZuB,CAA1B,CA9DkB,CA2EhB;;AACA5B,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACAO,IAAAA,GAAG,CAAC+C,mBAAJ,CAAwBjC,MAAxB;AACD,GAJQ,EAIN,CAACA,MAAD,CAJM,CAAT;AAMArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACgB,OAAL,EAAc;AACZ;AACD;;AACD,WAAOR,gBAAgB,CACpB+C,SADI,CACMvC,OADN,EACe,GADf,EAEJ2B,IAFI,CAEEa,OAAD,IAAa;AACjB,UAAIA,OAAO,CAACC,EAAR,CAAW,CAAX,CAAJ,EAAmB;AACjBhC,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACD,OAHD,MAGO;AACLK,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACD;AACF,KAVI,EAWJyB,KAXI,CAWG5B,KAAD,IAAW;AAChBQ,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAN,MAAAA,OAAO,CAACF,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACD,KAdI,CAAP;AAeD,GAnBQ,EAmBN,CAACD,OAAD,CAnBM,CAAT;;AAoBA,MAAIC,KAAK,YAAYX,uBAArB,EAA+C;AAC7C,wBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD,GAhHe,CAiHlB;;;AACE,MAAI,CAACU,OAAL,EAAc;AACZ,wBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAMD,aAAa,CAAC,UAAD,CAApC;AAAkD,QAAA,SAAS,EAAC,UAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GA3He,CA4HhB;;;AACA,MAAIS,aAAJ,EAAmB;AACjB,wBACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,gCACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAO,YAAA,SAAS,EAAC,MAAjB;AAAA,oCACE;AAAA,qCACE;AAAA,wCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADF,eAOE;AAAA,wBACGyB,UAAU,CAACC,GAAX,CAAgBQ,MAAD,IAAY;AAC1B,oCACE;AAAA,0CACE;AAAA,8BAAKpB,cAAc,CAACoB,MAAM,CAAC1C,OAAR;AAAnB;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE;AAAA,8BAAK0C,MAAM,CAACP;AAAZ;AAAA;AAAA;AAAA;AAAA,0BAFF;AAAA,mBAASO,MAAM,CAAC1C,OAAhB;AAAA;AAAA;AAAA;AAAA,wBADF;AAMD,eAPA;AADH;AAAA;AAAA;AAAA;AAAA,oBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAsBE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AACE,YAAA,QAAQ,EAAE,MAAO2C,CAAP,IAAa;AACrBA,cAAAA,CAAC,CAACC,cAAF;AACAD,cAAAA,CAAC,CAACE,eAAF,GAFqB,CAIrB;;AACA1B,cAAAA,WAAW,CAAC,IAAD,CAAX,CALqB,CAOrB;;AACA,oBAAM2B,KAAK,GAAG9B,SAAS,CAACkB,GAAV,CAAea,QAAD,IAAc;AACxC,oBAAIC,UAAU,GAAG;AACfC,kBAAAA,UAAU,EAAEF,QAAQ,CAACE,UADN;AAEf;AACAC,kBAAAA,IAAI,EAAE;AAHS,iBAAjB;AAKAH,gBAAAA,QAAQ,CAACD,KAAT,CAAeK,OAAf,CAAwBD,IAAD,IAAU;AAC/B,wBAAME,IAAI,GAAGC,QAAQ,CAACC,cAAT,CACXP,QAAQ,CAACE,UAAT,GAAsB,GAAtB,GAA4BC,IAAI,CAACK,IADtB,CAAb;;AAIA,sBAAIH,IAAI,CAACI,OAAT,EAAkB;AAChBR,oBAAAA,UAAU,CAACE,IAAX,GAAkBA,IAAI,CAACK,IAAvB;AACA;AACD;AACF,iBATD;AAUA,uBAAOP,UAAP;AACD,eAjBa,CAAd,CARqB,CA2BrB;;AACA,kBAAI;AACF;AACA,sBAAMS,UAAU,GAAG,MAAM/D,WAAW,CAACgE,eAAZ,CAA4B1D,OAA5B,CAAzB,CAFE,CAGF;;AACA,oBAAIyD,UAAU,KAAKtE,MAAM,CAACwE,SAAP,CAAiBC,WAApC,EAAiD;AAC/C;AACA,wBAAMlE,WAAW,CAACmE,UAAZ,CAAuB7D,OAAvB,CAAN;AACD,iBAPC,CAQF;;;AACA,oBAAI;AACF,wBAAM8D,OAAO,CAACC,GAAR,CACJjB,KAAK,CAACZ,GAAN,CAAU,MAAOgB,IAAP,IAAgB;AACxB;AACA;AACA,0BAAMH,QAAQ,GAAG,MAAMnD,UAAU,CAACoE,GAAX,CAAed,IAAI,CAACD,UAApB,CAAvB,CAHwB,CAIxB;;AACA,wBAAIF,QAAQ,CAACkB,KAAT,KAAmB,CAAvB,EAA0B;AACxB;AACA,6BAAOrE,UAAU,CAACsD,IAAX,CAAgBA,IAAI,CAACD,UAArB,EAAiCC,IAAI,CAACA,IAAtC,CAAP;AACD,qBARuB,CASxB;;;AACA;AACD,mBAXD,CADI,CAAN;;AAcA,sBAAI;AACF;AACA;AACA,0BAAMY,OAAO,CAACC,GAAR,CACJjB,KAAK,CAACZ,GAAN,CAAU,MAAOgB,IAAP,IAAgB;AACxB;AACA,4BAAMH,QAAQ,GAAG,MAAMnD,UAAU,CAACoE,GAAX,CACrBd,IAAI,CAACD,UADgB,CAAvB,CAFwB,CAMxB;;AACA,0BAAIF,QAAQ,CAACkB,KAAT,KAAmB,CAAvB,EAA0B;AACxB,+BAAOrE,UAAU,CAACsE,OAAX,CAAmBhB,IAAI,CAACD,UAAxB,CAAP;AACD;AACF,qBAVD,CADI,CAAN,CAHE,CAgBF;;AACA5B,oBAAAA,WAAW,CAAC,IAAD,CAAX,CAjBE,CAkBF;;AACAlB,oBAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,mBApBD,CAoBE,OAAO0B,GAAP,EAAY;AACZ3B,oBAAAA,OAAO,CAACF,KAAR,CAAc,yBAAd,EAAyC6B,GAAzC;AACD;AACF,iBAtCD,CAsCE,OAAOA,GAAP,EAAY;AACZ3B,kBAAAA,OAAO,CAACF,KAAR,CAAc,gBAAd,EAAgC6B,GAAhC;AACD;AACF,eAlDD,CAkDE,OAAOA,GAAP,EAAY;AACZ3B,gBAAAA,OAAO,CAACF,KAAR,CAAc,2BAAd;AACD,eApDD,SAoDU;AACR;AACAkB,gBAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,aArFH;AAAA,uBAuFGH,SAAS,CAACkB,GAAV,CAAc,CAACa,QAAD,EAAWoB,KAAX,kBACb;AAA+B,cAAA,SAAS,EAAC,MAAzC;AAAA,sCACE;AAAA,0BAAKpB,QAAQ,CAACqB;AAAd;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAA,0BACGrB,QAAQ,CAACD,KAAT,CAAeZ,GAAf,CAAoBgB,IAAD,iBAClB;AAAA,0CACE;AACE,oBAAA,IAAI,EAAC,OADP;AAEE,oBAAA,EAAE,EAAEH,QAAQ,CAACE,UAAT,GAAsB,GAAtB,GAA4BC,IAAI,CAACK,IAFvC;AAGE,oBAAA,IAAI,EAAER,QAAQ,CAACE,UAHjB;AAIE,oBAAA,KAAK,EAAEC,IAAI,CAACK,IAJd,CAKE;AALF;AAME,oBAAA,cAAc,EAAEL,IAAI,CAACK,IAAL,KAAc;AANhC;AAAA;AAAA;AAAA;AAAA,0BADF,eASE;AAAO,oBAAA,OAAO,EAAER,QAAQ,CAACE,UAAT,GAAsB,GAAtB,GAA4BC,IAAI,CAACK,IAAjD;AAAA,8BACGL,IAAI,CAACmB;AADR;AAAA;AAAA;AAAA;AAAA,0BATF;AAAA,mBAAUnB,IAAI,CAACK,IAAf;AAAA;AAAA;AAAA;AAAA,wBADD;AADH;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA,eAAUR,QAAQ,CAACE,UAAnB;AAAA;AAAA;AAAA;AAAA,oBADD,CAvFH,eA6GE;AAAQ,cAAA,QAAQ,EAAE/B,QAAQ,IAAIE,QAA9B;AAAwC,cAAA,IAAI,EAAC,QAA7C;AAAA,wBACGF,QAAQ,GACL,WADK,GAELE,QAAQ,GACN,mBADM,GAEN;AALR;AAAA;AAAA;AAAA;AAAA,oBA7GF,eAoHE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBApHF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAyJD;;AAAA,GAvRe,CAwRlB;;AACE,QAAMkD,OAAO,GAAG,MAAM;AACpB3D,IAAAA,aAAa,CAAC,IAAD,CAAb,CADoB,CAEpB;;AACAnB,IAAAA,gBAAgB,CACf+E,KADD,CACO,GADP,EACY,CADZ,EAEC5C,IAFD,CAEM,MAAM;AACV;AACAlB,MAAAA,gBAAgB,CAAC,IAAD,CAAhB,CAFU,CAGV;;AACAN,MAAAA,OAAO,CAACC,GAAR,CACG,uFAAsFZ,gBAAgB,CAACQ,OAAjB,CAAyBwE,WAAzB,EAAuC,IADhI;AAGD,KATD,EAUC3C,KAVD,CAUQC,GAAD,IAAS;AACd3B,MAAAA,OAAO,CAACF,KAAR,CAAc,iBAAd,EAAiC6B,GAAjC;AACD,KAZD,EAaC2C,OAbD,CAaS,MAAM;AACb;AACA9D,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAhBD;AAiBD,GApBD,CAzRgB,CA+ShB;;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,QAAQ,EAAED,UADZ;AAEE,MAAA,OAAO,EAAE,MAAM4D,OAAO,EAFxB;AAAA,gBAIG5D,UAAU,GAAG,YAAH,GAAkB;AAJ/B;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA3TD;;GAAMZ,G;UACgDV,O;;;KADhDU,G;AA6TN,eAAeA,GAAf","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\n\nimport { UnsupportedChainIdError } from \"@web3-react/core\";\n\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\n\nconst bundleDropModule = sdk.getBundleDropModule(\n  \"0xA147969A02B7Ab46364E8399aeb3396Ad0a6134a\",\n);\n\nconst tokenModule = sdk.getTokenModule(\n  \"0x3418AA364aAddbFF91Ed0d74D415C4c4D2Fe6324\"\n);\n\nconst voteModule = sdk.getVoteModule(\n  \"0x449bABD357d84a7Fe3FFe3D6182f9439BdeCbd6A\",\n);\nconst App = () => {\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"👋 Address:\", address)\n\n  // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n  const signer = provider ? provider.getSigner() : undefined;\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n  // isClaiming lets us easily keep a loading state while the NFT is minting.\n  const [isClaiming, setIsClaiming] = useState(false);\n  // Holds the amount of token each member has in state.\nconst [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n// The array holding all of our members addresses.\nconst [memberAddresses, setMemberAddresses] = useState([]);\nconst [proposals, setProposals] = useState([]);\nconst [isVoting, setIsVoting] = useState(false);\nconst [hasVoted, setHasVoted] = useState(false);\n\n// A fancy function to shorten someones wallet address, no need to show the whole thing. \nconst shortenAddress = (str) => {\n  return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n};\n\n// This useEffect grabs all the addresses of our members holding our NFT.\nuseEffect(() => {\n  if (!hasClaimedNFT) {\n    return;\n  }\n  \n  // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n  // with tokenId 0.\n  bundleDropModule\n    .getAllClaimerAddresses(\"0\")\n    .then((addresses) => {\n      console.log(\"🚀 Members addresses\", addresses)\n      setMemberAddresses(addresses);\n    })\n    .catch((err) => {\n      console.error(\"failed to get member list\", err);\n    });\n}, [hasClaimedNFT]);\n\n// This useEffect grabs the # of token each member holds.\nuseEffect(() => {\n  if (!hasClaimedNFT) {\n    return;\n  }\n\n  // Grab all the balances.\n  tokenModule\n    .getAllHolderBalances()\n    .then((amounts) => {\n      console.log(\"👜 Amounts\", amounts)\n      setMemberTokenAmounts(amounts);\n    })\n    .catch((err) => {\n      console.error(\"failed to get token amounts\", err);\n    });\n}, [hasClaimedNFT]);\n\n// Now, we combine the memberAddresses and memberTokenAmounts into a single array\nconst memberList = useMemo(() => {\n  return memberAddresses.map((address) => {\n    return {\n      address,\n      tokenAmount: ethers.utils.formatUnits(\n        // If the address isn't in memberTokenAmounts, it means they don't\n        // hold any of our token.\n        memberTokenAmounts[address] || 0,\n        18,\n      ),\n    };\n  });\n}, [memberAddresses, memberTokenAmounts]);\n  // Another useEffect!\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  useEffect(() => {\n    if (!address) {\n      return;\n    }\n    return bundleDropModule\n      .balanceOf(address, \"0\")\n      .then((balance) => {\n        if (balance.gt(0)) {\n          setHasClaimedNFT(true);\n          console.log(\"🌟 this user has a membership NFT!\")\n        } else {\n          setHasClaimedNFT(false);\n          console.log(\"😭 this user doesn't have a membership NFT.\")\n        }\n      })\n      .catch((error) => {\n        setHasClaimedNFT(false);\n        console.error(\"failed to nft balance\", error);\n      });\n  }, [address]);\n  if (error instanceof UnsupportedChainIdError ) {\n    return (\n      <div className=\"unsupported-network\">\n        <h2>Please connect to Rinkeby</h2>\n        <p>\n          This dapp only works on the Rinkeby network, please switch networks\n          in your connected wallet.\n        </p>\n      </div>\n    );\n  }\n//case 1 when metamask not connected\n  if (!address) {\n    return (\n      <div className=\"landing\">\n        <h1>Welcome to NarutoDAO</h1>\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n          Connect your wallet\n        </button>\n      </div>\n    );\n  }\n  //if connected wallet, minted nft for joining dao, show membership page. Case 3, show list of all holders\n  if (hasClaimedNFT) {\n    return (\n      <div className=\"member-page\">\n        <h1>🍪DAO Member Page</h1>\n        <p>Congratulations on being a member</p>\n        <div>\n          <div>\n            <h2>Member List</h2>\n            <table className=\"card\">\n              <thead>\n                <tr>\n                  <th>Address</th>\n                  <th>Token Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {memberList.map((member) => {\n                  return (\n                    <tr key={member.address}>\n                      <td>{shortenAddress(member.address)}</td>\n                      <td>{member.tokenAmount}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          <div>\n            <h2>Active Proposals</h2>\n            <form\n              onSubmit={async (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                //before we do async things, we want to disable the button to prevent double clicks\n                setIsVoting(true);\n\n                // lets get the votes from the form for the values\n                const votes = proposals.map((proposal) => {\n                  let voteResult = {\n                    proposalId: proposal.proposalId,\n                    //abstain by default\n                    vote: 2,\n                  };\n                  proposal.votes.forEach((vote) => {\n                    const elem = document.getElementById(\n                      proposal.proposalId + \"-\" + vote.type\n                    );\n\n                    if (elem.checked) {\n                      voteResult.vote = vote.type;\n                      return;\n                    }\n                  });\n                  return voteResult;\n                });\n\n                // first we need to make sure the user delegates their token to vote\n                try {\n                  //we'll check if the wallet still needs to delegate their tokens before they can vote\n                  const delegation = await tokenModule.getDelegationOf(address);\n                  // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\n                  if (delegation === ethers.constants.AddressZero) {\n                    //if they haven't delegated their tokens yet, we'll have them delegate them before voting\n                    await tokenModule.delegateTo(address);\n                  }\n                  // then we need to vote on the proposals\n                  try {\n                    await Promise.all(\n                      votes.map(async (vote) => {\n                        // before voting we first need to check whether the proposal is open for voting\n                        // we first need to get the latest state of the proposal\n                        const proposal = await voteModule.get(vote.proposalId);\n                        // then we check if the proposal is open for voting (state === 1 means it is open)\n                        if (proposal.state === 1) {\n                          // if it is open for voting, we'll vote on it\n                          return voteModule.vote(vote.proposalId, vote.vote);\n                        }\n                        // if the proposal is not open for voting we just return nothing, letting us continue\n                        return;\n                      })\n                    );\n                    try {\n                      // if any of the propsals are ready to be executed we'll need to execute them\n                      // a proposal is ready to be executed if it is in state 4\n                      await Promise.all(\n                        votes.map(async (vote) => {\n                          // we'll first get the latest state of the proposal again, since we may have just voted before\n                          const proposal = await voteModule.get(\n                            vote.proposalId\n                          );\n\n                          //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\n                          if (proposal.state === 4) {\n                            return voteModule.execute(vote.proposalId);\n                          }\n                        })\n                      );\n                      // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\n                      setHasVoted(true);\n                      // and log out a success message\n                      console.log(\"successfully voted\");\n                    } catch (err) {\n                      console.error(\"failed to execute votes\", err);\n                    }\n                  } catch (err) {\n                    console.error(\"failed to vote\", err);\n                  }\n                } catch (err) {\n                  console.error(\"failed to delegate tokens\");\n                } finally {\n                  // in *either* case we need to set the isVoting state to false to enable the button again\n                  setIsVoting(false);\n                }\n              }}\n            >\n              {proposals.map((proposal, index) => (\n                <div key={proposal.proposalId} className=\"card\">\n                  <h5>{proposal.description}</h5>\n                  <div>\n                    {proposal.votes.map((vote) => (\n                      <div key={vote.type}>\n                        <input\n                          type=\"radio\"\n                          id={proposal.proposalId + \"-\" + vote.type}\n                          name={proposal.proposalId}\n                          value={vote.type}\n                          //default the \"abstain\" vote to chedked\n                          defaultChecked={vote.type === 2}\n                        />\n                        <label htmlFor={proposal.proposalId + \"-\" + vote.type}>\n                          {vote.label}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n              <button disabled={isVoting || hasVoted} type=\"submit\">\n                {isVoting\n                  ? \"Voting...\"\n                  : hasVoted\n                    ? \"You Already Voted\"\n                    : \"Submit Votes\"}\n              </button>\n              <small>\n                This will trigger multiple transactions that you will need to\n                sign.\n              </small>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  };\n//if not claimed then claim using mintNft\n  const mintNft = () => {\n    setIsClaiming(true);\n    // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n    bundleDropModule\n    .claim(\"0\", 1)\n    .then(() => {\n      // Set claim state.\n      setHasClaimedNFT(true);\n      // Show user their fancy new NFT!\n      console.log(\n        `🌊 Successfully Minted! Check it our on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address.toLowerCase()}/0`\n      );\n    })\n    .catch((err) => {\n      console.error(\"failed to claim\", err);\n    })\n    .finally(() => {\n      // Stop loading state.\n      setIsClaiming(false);\n    });\n  }\n\n  // Render mint nft screen.\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free 🍪DAO Membership NFT</h1>\n      <button\n        disabled={isClaiming}\n        onClick={() => mintNft()}\n      >\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}