{"ast":null,"code":"var _jsxFileName = \"/home/ellika/Web3/DAOStarter/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sdk = new ThirdwebSDK(\"rinkeby\");\nconst bundleDropModule = sdk.getBundleDropModule(\"0xA147969A02B7Ab46364E8399aeb3396Ad0a6134a\");\n\nconst App = () => {\n  _s();\n\n  const {\n    connectWallet,\n    address,\n    error,\n    provider\n  } = useWeb3();\n  console.log(\"👋 Address:\", address); // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n\n  const signer = provider ? provider.getSigner() : undefined;\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false); // isClaiming lets us easily keep a loading state while the NFT is minting.\n\n  const [isClaiming, setIsClaiming] = useState(false); // Another useEffect!\n\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n  useEffect(() => {\n    if (!address) {\n      return;\n    }\n\n    return bundleDropModule.balanceOf(address, \"0\").then(balance => {\n      if (balance.gt(0)) {\n        setHasClaimedNFT(true);\n        console.log(\"🌟 this user has a membership NFT!\");\n      } else {\n        setHasClaimedNFT(false);\n        console.log(\"😭 this user doesn't have a membership NFT.\");\n      }\n    }).catch(error => {\n      setHasClaimedNFT(false);\n      console.error(\"failed to nft balance\", error);\n    });\n  }, [address]); //case 1 when metamask not connected\n\n  if (!address) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"landing\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to NarutoDAO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => connectWallet(\"injected\"),\n        className: \"btn-hero\",\n        children: \"Connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  } //if connected wallet, minted nft for joining dao, show membership page. Case 3\n\n\n  if (hasClaimedNFT) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"member-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDF6ADAO Member Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Congratulations on being a member\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n  ; //if not claimed then claim using mintNft\n\n  const mintNft = () => {\n    setIsClaiming(true); // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n\n    bundleDropModule.claim(\"0\", 1).then(() => {\n      // Set claim state.\n      setHasClaimedNFT(true); // Show user their fancy new NFT!\n\n      console.log(`🌊 Successfully Minted! Check it our on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address.toLowerCase()}/0`);\n    }).catch(err => {\n      console.error(\"failed to claim\", err);\n    }).finally(() => {\n      // Stop loading state.\n      setIsClaiming(false);\n    });\n  }; // Render mint nft screen.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mint your free \\uD83C\\uDF6ADAO Membership NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isClaiming,\n      onClick: () => mintNft(),\n      children: isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"5z1o/SmDqsqD9hxbpq/aLqTxMbw=\", false, function () {\n  return [useWeb3];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ellika/Web3/DAOStarter/src/App.jsx"],"names":["useEffect","useMemo","useState","useWeb3","ThirdwebSDK","sdk","bundleDropModule","getBundleDropModule","App","connectWallet","address","error","provider","console","log","signer","getSigner","undefined","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","setProviderOrSigner","balanceOf","then","balance","gt","catch","mintNft","claim","toLowerCase","err","finally"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\n\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\n\nconst bundleDropModule = sdk.getBundleDropModule(\n  \"0xA147969A02B7Ab46364E8399aeb3396Ad0a6134a\",\n);\n\nconst App = () => {\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"👋 Address:\", address)\n\n  // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n  const signer = provider ? provider.getSigner() : undefined;\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n  // isClaiming lets us easily keep a loading state while the NFT is minting.\n  const [isClaiming, setIsClaiming] = useState(false);\n\n  // Another useEffect!\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  useEffect(() => {\n    if (!address) {\n      return;\n    }\n    return bundleDropModule\n      .balanceOf(address, \"0\")\n      .then((balance) => {\n        if (balance.gt(0)) {\n          setHasClaimedNFT(true);\n          console.log(\"🌟 this user has a membership NFT!\")\n        } else {\n          setHasClaimedNFT(false);\n          console.log(\"😭 this user doesn't have a membership NFT.\")\n        }\n      })\n      .catch((error) => {\n        setHasClaimedNFT(false);\n        console.error(\"failed to nft balance\", error);\n      });\n  }, [address]);\n//case 1 when metamask not connected\n  if (!address) {\n    return (\n      <div className=\"landing\">\n        <h1>Welcome to NarutoDAO</h1>\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n          Connect your wallet\n        </button>\n      </div>\n    );\n  }\n  //if connected wallet, minted nft for joining dao, show membership page. Case 3\n  if (hasClaimedNFT) {\n    return (\n      <div className=\"member-page\">\n        <h1>🍪DAO Member Page</h1>\n        <p>Congratulations on being a member</p>\n      </div>\n    );\n  };\n//if not claimed then claim using mintNft\n  const mintNft = () => {\n    setIsClaiming(true);\n    // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n    bundleDropModule\n    .claim(\"0\", 1)\n    .then(() => {\n      // Set claim state.\n      setHasClaimedNFT(true);\n      // Show user their fancy new NFT!\n      console.log(\n        `🌊 Successfully Minted! Check it our on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address.toLowerCase()}/0`\n      );\n    })\n    .catch((err) => {\n      console.error(\"failed to claim\", err);\n    })\n    .finally(() => {\n      // Stop loading state.\n      setIsClaiming(false);\n    });\n  }\n\n  // Render mint nft screen.\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free 🍪DAO Membership NFT</h1>\n      <button\n        disabled={isClaiming}\n        onClick={() => mintNft()}\n      >\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}